/**                                                   //Tasks
 * @param {number[]} nums                             // Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
   for (let i=0; i <= nums.length; i++) {
   for (let j = i + 1; j < nums.length; j++) {
       if (nums[i] + nums[j] === target) {
       return [i, j]; // Return the indices of the pair as soon as it's found
       }
   } 
   }
   return [];
};


// Time Complexity: O(n^2) - The time complexity is still quadratic due to the nested loops.

Space Complexity: O(1) or O(2) (depending on whether you consider loop variables) - constant 
because the size of the returned array (containing the indices) is fixed and does not depend on the input size.
